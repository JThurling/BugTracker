@page "/Tasks"
@using Core.Models.Output.Bug
@inject HttpClient Http

@if (_tasks == null)
{
    <div class="col-12 bg-white shadow-sm">
        <Skeleton Active="true"></Skeleton>
    </div>
}
else
{
    <div class="col-12 mb-3">
            <div style="background-color: #f0f2f5" class="d-flex justify-content-between p-1">
                <div>
                    <h3>Tasks</h3>
                </div>
                <div>
                    <Button Class="shadow-sm" Icon="plus" Type="dashed" @onclick="OnCreate">New Task</Button>
                </div>
            </div>
    </div>
    <div class="col-12">
        @foreach (var task in _tasks)
        {
            <div class="shadow-sm mb-2 card border-0">
                <div class="card-body">
                    <div class="row">
                        <div class="col-2">
                            <h6 style="cursor: pointer" @onclick="() => ShowModal(task)">@task.Bug</h6>
                        </div>
                        <div class="col-2">
                            @if (task.SubTasks.Count > 0)
                            {
                                <a @onclick="() => DisplaySubTasks(task)">
                                    <Tag Style="cursor: pointer" Color="blue">Subtask: @task.SubTasks.Count</Tag>
                                </a>
                            }
                        </div>
                        <div class="col-2">
                            <Tooltip Placement="@PlacementType.TopLeft" Title="@task.Priority">
                                @if (task.Priority == "High")
                                {
                                    <Icon Type="flag" Style="font-size: 1.7em" Class="text-danger" Theme="outline"/>
                                }
                                else if (task.Priority == "Medium")
                                {
                                    <Icon Type="flag" Style="font-size: 1.7em" Class="text-warning" Theme="outline"/>
                                }
                                else
                                {
                                    <Icon Type="flag" Style="font-size: 1.7em" Class="text-secondary" Theme="outline"/>
                                }
                            </Tooltip>
                        </div>
                        <div class="col-2">
                            <div class="row">
                                <Icon Type="comment" Style="font-size: 1.7em" Theme="outline"/>
                                <p style="font-weight: bold">@task.Comments.Count</p>
                            </div>
                        </div>

                        <div class="col-2">
                            <p style="font-weight: bold">Deadline: @task.Deadline</p>
                        </div>
                    </div>
                    @if ((Display && task.SubTasks.Count > 0) && Array.IndexOf(_tasks, task) == Index)
                    {
                        <hr>
                        <div class="">
                            <h6>Subtasks</h6>
                            <div class="col-12 pt-3 pl-3">
                                <Timeline>
                                    @foreach (var subtask in task.SubTasks)
                                    {
                                        <TimelineItem>@subtask.Task</TimelineItem>
                                    }
                                </Timeline>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

<Modal Title="@("Create a new task")"
       Visible="@_create"
       Centered="true"
       OnCancel="CancelCreation"
       Width="1320">

</Modal>

<Modal Title="@("Title")"
       Centered="true"
       Visible="@_visible"
       OnCancel="@HideModal"
       Width="1320">
    <div class="row">
        <div class="col-6">
            <p>@Bug.Priority</p>
        </div>
        <div class="col-6" style="height: 70vh">

            <div style="height: 45vh" class="bg-light p-3">
                <h6>Comment</h6>
                @foreach (var comment in Bug.Comments)
                {
                    <p>@comment.CommentTime</p>
                    <p>@comment.Comment</p>
                }
            </div>

            <div style="height: 20vh">
                <BlazoredTextEditor @ref="@QuillHtml">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                    <EditorContent>
                    </EditorContent>
                </BlazoredTextEditor>
            </div>
        </div>
    </div>
</Modal>

@code {
    bool _visible = false;
    bool _create = false;
    private BugOutput[] _tasks;
    private BugOutput Bug { get; set; }
    BlazoredTextEditor QuillHtml;
    private uint _offsetTop = 10;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _tasks = await Http.GetFromJsonAsync<BugOutput[]>("api/bug");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    public bool Display = false;
    public int Index;

    public void DisplaySubTasks(BugOutput bug)
    {
        Display = !Display;
        Index = Array.IndexOf(_tasks, bug);
    }

    private void ShowModal(BugOutput bug)
    {
        _visible = true;
        Bug = bug;
    }

    private void HideModal()
    {
        _visible = false;
    }

    private void OnCreate()
    {
        _create = true;
    }

    private void CancelCreation()
    {
        _create = false;
    }


}
