@page "/Users"
@using BugTracker.Shared.Models.Output.Users
@inject DrawerService DrawerService
@inject MessageService Message;
@inject HttpClient Http
<h3>Users</h3>

<div class="col-12 row bg-white shadow-sm" style="border-radius: 10px">
    <div class="col-6 p-3">
        <h6>Admin Details</h6>
    </div>
    <div class="col-6 p-3">
        <h6>Users</h6>
        @if (_users == null)
        {
            <Skeleton Active="true"></Skeleton>

            <Skeleton Active="true"></Skeleton>

            <Skeleton Active="true"></Skeleton>

            <Skeleton Active="true"></Skeleton>
        }
        else
        {
            @foreach (var user in _users)
            {
                <div class="d-flex justify-content-between">
                    <div class="row p-3">
                        <p style="font-weight: bold" class="mr-3">Username: </p>
                        <p>@user.Username</p>
                    </div>
                    <div>
                        <Icon Type="ellipsis" Style="font-size: 1.7em; cursor: pointer;" Theme="outline" @onclick="() => openOption(user)"/>
                    </div>
                </div>
            }
        }
    </div>
</div>
@if (User != null)
{
    <Drawer Width="640" Closable="true" Visible="_options" Placement="right" Title='($"Test")' OnClose="() => _options = false">
        <div class="row col-12">
            <Input Placeholder="Basic usage" Value="User.Username"/>
        </div>
        <br>
        <div class="row col-12">
            <Button Class="shadow-sm mr-3" Icon="delete" Type="dashed" @onclick="() => onDelete(User)" Danger>Delete</Button>
            <Button Class="shadow-sm" Icon="plus" Type="dashed">Update</Button>
        </div>
    </Drawer>
}

@code {
    private UserOutput[] _users;

    private UserOutput User { get; set; }

    private bool _options = false;

    protected override async Task OnInitializedAsync()
    {
        _users = await Http.GetFromJsonAsync<UserOutput[]>("api/UserManager");
    }

    private void openOption(UserOutput user)
    {
        User = user;
        _options = true;
    }

    private async void onDelete(UserOutput user)
    {
        var result = await Http.DeleteAsync($"api/usermanager?id={user.Id}");
    }

}
